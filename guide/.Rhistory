trend <- 0.5 * t  # slope can be adjusted as needed
# Define the seasonality component
amplitude <- 5  # can be adjusted as needed
period <- 2 * pi / 12
horizontal_shift <- 3
vertical_shift <- 0
seasonality <- amplitude * sin(period * (t - horizontal_shift)) + vertical_shift
# Add some random noise
noise <- rnorm(length, mean = 0, sd = 0.25)  # sd can be adjusted as needed
# Combine the components to create the time series
yt <- trend + seasonality + noise
# Visualization
data.frame(t, yt) %>%
ggplot(aes(x = t, y = yt)) +
geom_line(size = 1) +
labs(
x = "t",
y = expression(y[t]),
title = "Simulated Time Series"
) +
scale_x_continuous(breaks = c(1, 12, 24, 36, 48)) +
theme_classic()
# Reproducibility
set.seed(333)
# Generate time values based on the length of the time series
length <- 48
t <- 1:length
# Define the trend component
trend <- 0.5 * t  # slope can be adjusted as needed
# Define the seasonality component
amplitude <- 5  # can be adjusted as needed
period <- 2 * pi / 12
horizontal_shift <- 3
vertical_shift <- 0
seasonality <- amplitude * sin(period * (t - horizontal_shift)) + vertical_shift
# Add some random noise
noise <- rnorm(length, mean = 0, sd = 0.2)  # sd can be adjusted as needed
# Combine the components to create the time series
yt <- trend + seasonality + noise
# Visualization
data.frame(t, yt) %>%
ggplot(aes(x = t, y = yt)) +
geom_line(size = 1) +
labs(
x = "t",
y = expression(y[t]),
title = "Simulated Time Series"
) +
scale_x_continuous(breaks = c(1, 12, 24, 36, 48)) +
theme_classic()
# Reproducibility
set.seed(333)
# Generate time values based on the length of the time series
length <- 48
t <- 1:length
# Define the trend component
trend <- 0.5 * t  # slope can be adjusted as needed
# Define the seasonality component
amplitude <- 5  # can be adjusted as needed
period <- 2 * pi / 12
horizontal_shift <- 3
vertical_shift <- 100
seasonality <- amplitude * sin(period * (t - horizontal_shift)) + vertical_shift
# Add some random noise
noise <- rnorm(length, mean = 0, sd = 0.2)  # sd can be adjusted as needed
# Combine the components to create the time series
yt <- trend + seasonality + noise
# Visualization
data.frame(t, yt) %>%
ggplot(aes(x = t, y = yt)) +
geom_line(size = 1) +
labs(
x = "t",
y = expression(y[t]),
title = "Simulated Time Series"
) +
scale_x_continuous(breaks = c(1, 12, 24, 36, 48)) +
theme_classic()
# Reproducibility
set.seed(333)
# Generate time values based on the length of the time series
length <- 48
t <- 1:length
# Define the trend component
trend <- 0.5 * t  # slope can be adjusted as needed
# Define the seasonality component
amplitude <- 5  # can be adjusted as needed
period <- 2 * pi / 12
horizontal_shift <- 3
vertical_shift <- 0  # can be adjusted as needed
seasonality <- amplitude * sin(period * (t - horizontal_shift)) + vertical_shift
# Add some random noise
noise <- rnorm(length, mean = 0, sd = 0.2)  # sd can be adjusted as needed
# Combine the components to create the time series
yt <- trend + seasonality + noise
# Visualization
data.frame(t, yt) %>%
ggplot(aes(x = t, y = yt)) +
geom_line(size = 1) +
labs(
x = "t",
y = expression(y[t]),
title = "Simulated Time Series"
) +
scale_x_continuous(breaks = c(1, 12, 24, 36, 48)) +
theme_classic()
# Reproducibility
set.seed(333)
# Generate time values based on the length of the time series
length <- 48
t <- 0:(length - 1)
# Generate random values from a uniform distribution [0, 1]
phi <- runif(length, min = 0, max = 1)
# Calculate Yt values
Yt <- cos(2 * pi * (t / 12 + phi))
# Visualization
data.frame(t, Yt) %>%
ggplot(aes(x = t, y = Yt)) +
geom_line(size = 1) +
labs(
x = "t",
y = expression(Y[t]),
title = expression(paste("Time Series: ", Y[t] == cos (2*pi*(t/12 + Phi))))
) +
scale_x_continuous(breaks = c(0, 12, 24, 36, 47)) +
theme_classic()
install.packages("tseries")
library(tseries)
library(tseries)
Yt
ts(Yt)
kpss.test(ts(Yt))
adf.test(ts(Yt))
kpss.test(ts(Yt))
adf.test(ts(Yt))
# Reproducibility
set.seed(333)
# Generate time values based on the length of the time series
length <- 48
t <- 1:length
# Define the trend component
trend <- 0.5 * t  # slope can be adjusted as needed
# Define the seasonality component
amplitude <- 5  # can be adjusted as needed
period <- 2 * pi / 12
horizontal_shift <- 3
vertical_shift <- 0  # can be adjusted as needed
seasonality <- amplitude * sin(period * (t - horizontal_shift)) + vertical_shift
# Add some random noise
noise <- rnorm(length, mean = 0, sd = 0.2)  # sd can be adjusted as needed
# Combine the components to create the time series
yt <- trend #+ seasonality + noise
# Visualization
data.frame(t, yt) %>%
ggplot(aes(x = t, y = yt)) +
geom_line(size = 1) +
labs(
x = "t",
y = expression(y[t]),
title = "Simulated Time Series"
) +
scale_x_continuous(breaks = c(1, 12, 24, 36, 48)) +
theme_classic()
# Reproducibility
set.seed(333)
# Generate time values based on the length of the time series
length <- 48
t <- 1:length
# Define the trend component
trend <- 0.5 * t  # slope can be adjusted as needed
# Define the seasonality component
amplitude <- 5  # can be adjusted as needed
period <- 2 * pi / 12
horizontal_shift <- 3
vertical_shift <- 0  # can be adjusted as needed
seasonality <- amplitude * sin(period * (t - horizontal_shift)) + vertical_shift
# Add some random noise
noise <- rnorm(length, mean = 0, sd = 0.2)  # sd can be adjusted as needed
# Combine the components to create the time series
yt <- trend + seasonality #+ noise
# Visualization
data.frame(t, yt) %>%
ggplot(aes(x = t, y = yt)) +
geom_line(size = 1) +
labs(
x = "t",
y = expression(y[t]),
title = "Simulated Time Series"
) +
scale_x_continuous(breaks = c(1, 12, 24, 36, 48)) +
theme_classic()
# Reproducibility
set.seed(333)
# Generate time values based on the length of the time series
length <- 48
t <- 1:length
# Define the trend component
trend <- 0.5 * t  # slope can be adjusted as needed
# Define the seasonality component
amplitude <- 5  # can be adjusted as needed
period <- 2 * pi / 12
horizontal_shift <- 3
vertical_shift <- 0  # can be adjusted as needed
seasonality <- amplitude * sin(period * (t - horizontal_shift)) + vertical_shift
# Add some random noise
noise <- rnorm(length, mean = 0, sd = 0.2)  # sd can be adjusted as needed
# Combine the components to create the time series
yt <- trend + seasonality + noise
# Visualization
data.frame(t, yt) %>%
ggplot(aes(x = t, y = yt)) +
geom_line(size = 1) +
labs(
x = "t",
y = expression(y[t]),
title = "Simulated Time Series"
) +
scale_x_continuous(breaks = c(1, 12, 24, 36, 48)) +
theme_classic()
# Reproducibility
set.seed(333)
# Generate time values based on the length of the time series
length <- 48
t <- 0:(length - 1)
# Generate random values from a uniform distribution [0, 1]
phi <- runif(length, min = 0, max = 1)
# Calculate Yt values
Yt <- cos(2 * pi * (t / 12 + phi))
# Visualization
data.frame(t, Yt) %>%
ggplot(aes(x = t, y = Yt)) +
geom_line(size = 1) +
labs(
x = "t",
y = expression(Y[t]),
title = expression(paste("Time Series: ", Y[t] == cos (2*pi*(t/12 + Phi))))
) +
scale_x_continuous(breaks = c(0, 12, 24, 36, 47)) +
theme_classic()
# Reproducibility
set.seed(333)
# Generate time values based on the length of the time series
length <- 48
t <- 0:(length - 1)
# Generate random values from a uniform distribution [0, 1]
phi <- runif(length, min = 0, max = 1)
# Calculate Yt values
Yt <- cos(2 * pi * (t / 12 + 0))
# Visualization
data.frame(t, Yt) %>%
ggplot(aes(x = t, y = Yt)) +
geom_line(size = 1) +
labs(
x = "t",
y = expression(Y[t]),
title = expression(paste("Time Series: ", Y[t] == cos (2*pi*(t/12 + Phi))))
) +
scale_x_continuous(breaks = c(0, 12, 24, 36, 47)) +
theme_classic()
# Reproducibility
set.seed(333)
# Generate time values based on the length of the time series
length <- 48
t <- 0:(length - 1)
# Generate random values from a uniform distribution [0, 1]
phi <- runif(length, min = 0, max = 1)
# Calculate Yt values
Yt <- cos(2 * pi * (t / 12 + phi))
# Visualization
data.frame(t, Yt) %>%
ggplot(aes(x = t, y = Yt)) +
geom_line(size = 1) +
labs(
x = "t",
y = expression(Y[t]),
title = expression(paste("Time Series: ", Y[t] == cos (2*pi*(t/12 + Phi))))
) +
scale_x_continuous(breaks = c(0, 12, 24, 36, 47)) +
theme_classic()
knitr::include_graphics("maxresdefault.jpg")
X <- runif(100)
Y <- runif(100)
plot(X, Y)
COV(X, Y)
cov(X, Y)
X <- runif(100)
Y <- X + runif(100)
plot(X, Y)
cov(X, Y)
cov(X, Y)
Y <- 2*X + runif(100)
cov(X, Y)
cov(X+Y, X-Y)
cov(X+Y, X-Y)
cov(X+Y, X-Y)
cov(X+Y, X-Y)
# Set the desired variance
desired_variance <- 4  # Replace with the desired variance value
# Generate X and Y vectors with the same variance
set.seed(42)  # For reproducibility
# Generate X with the desired variance
X <- rnorm(100, mean = 0, sd = sqrt(desired_variance))
# Generate Y with the same variance as X
Y <- rnorm(100, mean = 0, sd = sqrt(desired_variance))
# Check the variances
variance_X <- var(X)
variance_Y <- var(Y)
cat("Variance of X:", variance_X, "\n")
cat("Variance of Y:", variance_Y, "\n")
# Set the desired variance
desired_variance <- 4  # Replace with the desired variance value
# Generate X and Y vectors with the same variance
set.seed(42)  # For reproducibility
# Generate X with the desired variance
X <- rnorm(100, mean = 0, sd = sqrt(desired_variance))
# Generate Y with the same variance as X
Y <- rnorm(100, mean = 0, sd = sqrt(desired_variance))
# Check the variances
variance_X <- var(X)
variance_Y <- var(Y)
cat("Variance of X:", variance_X, "\n")
cat("Variance of Y:", variance_Y, "\n")
# Generate X and Y vectors with the same variance
set.seed(42)  # For reproducibility
# Generate X with the desired variance
X <- rnorm(100, mean = 0, sd = 5)
# Generate Y with the same variance as X
Y <- rnorm(100, mean = 0, sd = 5)
# Check the variances
variance_X <- var(X)
variance_Y <- var(Y)
cat("Variance of X:", variance_X, "\n")
cat("Variance of Y:", variance_Y, "\n")
# Generate X with the desired variance
X <- rnorm(100, mean = 0, sd = 5)
sd(X)
# Generate Y with the same variance as X
Y <- rnorm(100, mean = 0, sd = 5)
# Generate X and Y vectors with the same variance
set.seed(42)  # For reproducibility
# Generate X with the desired variance
X <- rnorm(1000, mean = 0, sd = 5)
# Generate Y with the same variance as X
Y <- rnorm(1000, mean = 0, sd = 5)
# Check the variances
variance_X <- var(X)
variance_Y <- var(Y)
cat("Variance of X:", variance_X, "\n")
cat("Variance of Y:", variance_Y, "\n")
# Generate X and Y vectors with the same variance
set.seed(42)  # For reproducibility
# Generate X with the desired variance
X <- rnorm(10000, mean = 0, sd = 5)
# Generate Y with the same variance as X
Y <- rnorm(10000, mean = 0, sd = 5)
# Check the variances
variance_X <- var(X)
variance_Y <- var(Y)
cat("Variance of X:", variance_X, "\n")
cat("Variance of Y:", variance_Y, "\n")
# Generate X and Y vectors with the same variance
set.seed(42)  # For reproducibility
# Generate X with the desired variance
X <- rnorm(100000, mean = 0, sd = 5)
# Generate Y with the same variance as X
Y <- rnorm(100000, mean = 0, sd = 5)
# Check the variances
variance_X <- var(X)
variance_Y <- var(Y)
cat("Variance of X:", variance_X, "\n")
cat("Variance of Y:", variance_Y, "\n")
# Generate X and Y vectors with the same variance
set.seed(42)  # For reproducibility
# Generate X with the desired variance
X <- rnorm(1000000, mean = 0, sd = 5)
# Generate Y with the same variance as X
Y <- rnorm(1000000, mean = 0, sd = 5)
# Check the variances
variance_X <- var(X)
variance_Y <- var(Y)
cat("Variance of X:", variance_X, "\n")
cat("Variance of Y:", variance_Y, "\n")
# Generate X and Y vectors with the same variance
set.seed(42)  # For reproducibility
# Generate X with the desired variance
X <- rnorm(1000000, mean = 0, sd = 2)
# Generate Y with the same variance as X
Y <- rnorm(1000000, mean = 0, sd = 2)
# Check the variances
variance_X <- var(X)
variance_Y <- var(Y)
cat("Variance of X:", variance_X, "\n")
cat("Variance of Y:", variance_Y, "\n")
cov(X, Y)
cov(X+Y, X-Y)
# Generate X and Y vectors with the same variance
set.seed(42)  # For reproducibility
# Generate X with the desired variance
X <- rnorm(1000000, mean = 0, sd = 1)
# Generate Y with the same variance as X
Y <- rnorm(1000000, mean = 0, sd = 1)
# Check the variances
variance_X <- var(X)
variance_Y <- var(Y)
cat("Variance of X:", variance_X, "\n")
cat("Variance of Y:", variance_Y, "\n")
cov(X, Y)
cov(X+Y, X-Y)
# Reproducibility
set.seed(333)
# Generate time values based on the length of the time series
length <- 48
t <- 0:(length - 1)
# Generate random values from a uniform distribution [0, 1]
phi <- runif(length, min = 0, max = 1)
# Calculate Yt values
Yt <- cos(2 * pi * t / 12 + phi)
# Visualization
data.frame(t, Yt) %>%
ggplot(aes(x = t, y = Yt)) +
geom_line(size = 1) +
labs(
x = "t",
y = expression(Y[t]),
title = expression(paste("Time Series: ", Y[t] == cos (2*pi*(t/12 + Phi))))
) +
scale_x_continuous(breaks = c(0, 12, 24, 36, 47)) +
theme_classic()
# Reproducibility
set.seed(333)
# Generate time values based on the length of the time series
length <- 48
t <- 0:(length - 1)
# Generate random values from a uniform distribution [0, 1]
phi <- runif(length, min = 0, max = 1)
# Calculate Yt values
Yt <- cos(2 * pi * (t / 12 + phi))
# Visualization
data.frame(t, Yt) %>%
ggplot(aes(x = t, y = Yt)) +
geom_line(size = 1) +
labs(
x = "t",
y = expression(Y[t]),
title = expression(paste("Time Series: ", Y[t] == cos (2*pi*(t/12 + Phi))))
) +
scale_x_continuous(breaks = c(0, 12, 24, 36, 47)) +
theme_classic()
knitr::include_graphics("img/TSA HW01 3.png")
knitr::include_graphics("img/TSA HW01 4a.png")
knitr::include_graphics("img/TSA HW01 4ab.png")
knitr::include_graphics("img/TSA HW01 4c.png")
knitr::opts_chunk$set(echo = TRUE)
demand <- data.frame(
Year = c(1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4),
Quarter = c(2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1),
Period = 1:12,
Demand = c(8000, 13000, 23000, 34000, 10000, 18000, 23000, 38000, 12000, 13000, 32000, 41000)
)
demand
demand$Demand
library(httr)
library(httr)
single_data <- list(
Gender = 'Male',
Married = 'No',
Dependents = '0',
Education = 'Graduate',
Self_Employed = 'No',
ApplicantIncome = 10000,
CoapplicantIncome = 10000,
LoanAmount = 1000,
Loan_Amount_Term = 30,
Credit_History = 1.0,
Property_Area = 'Urban'
)
r <- POST(url = 'https://loan-approval-app-facb8c5d72fa.herokuapp.com/result',
body = single_data,
encode = 'json')
r
content(r)
test_data <- read.csv('https://raw.githubusercontent.com/dphi-official/Datasets/master/Loan_Data/loan_test.csv')
input_data <- head(test_data, 5)
knitr::kable(input_data)
library(purrr)
install.packages("cli")
install.packages("cli")
install.packages("cli")
library(httr)
single_data <- list(
Gender = 'Male',
Married = 'No',
Dependents = '0',
Education = 'Graduate',
Self_Employed = 'No',
ApplicantIncome = 10000,
CoapplicantIncome = 10000,
LoanAmount = 1000,
Loan_Amount_Term = 30,
Credit_History = 1.0,
Property_Area = 'Urban'
)
r <- POST(url = 'https://loan-approval-app-facb8c5d72fa.herokuapp.com/result',
body = single_data,
encode = 'json')
r
content(r)
test_data <- read.csv('https://raw.githubusercontent.com/dphi-official/Datasets/master/Loan_Data/loan_test.csv')
input_data <- head(test_data, 5)
knitr::kable(input_data)
library(purrr)
update.packages(ask = FALSE)
